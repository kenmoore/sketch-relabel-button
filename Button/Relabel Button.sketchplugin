// Relabel Button Plugin (cmd j)

/*
  Author: Ken Moore (with bits from Alexander Kudymov's Dynamic Button plugin)
  Version: 0.4

  The Relabel Button plugin lets you easily change the label of any button 
  (a group containing a text layer and other visual elements). Just select the 
  group and press Cmd+K, type the new label into the prompt, and the button is 
  resized to fit the new text with prior padding preserved.   
*/

// Display an error alert
function alert(msg, title) {
  title = title || "alert";
  var app = [NSApplication sharedApplication];
  [app displayDialog:msg withTitle:title];
}

// Derive the padding between the text layer and the background layers
function getButtonPadding(buttonRect, textLayer) {
  var textFrame = [textLayer frame];

  return {
    top: [textFrame y] - [buttonRect y],
    right: ([buttonRect x] + [buttonRect width]) - ([textFrame x] + [textFrame width]),
    bottom: ([buttonRect y] + [buttonRect height]) - ([textFrame y] + [textFrame height]),
    left: [textFrame x] - [buttonRect x]
  };
}

// Set the new padding (resizes layers that surround the text and repositions any 
// layers to the right of the text layer's left edge)
function setButtonPadding(buttonRect, textLayer, layers, padding) {
  // determine how much the background is changing
  var textFrame = [textLayer frame];
  var newWidth = padding.left + [textFrame width] + padding.right;
  var deltaWidth = newWidth - [buttonRect width];
  var textAlignment = [textLayer textAlignment];
  
  if (textAlignment == 1) { // right
    setButtonPaddingRight(textLayer, layers, textFrame, deltaWidth);
  } else if (textAlignment == 2) { // center
    setButtonPaddingCenter(textLayer, layers, textFrame, deltaWidth);
  } else { // 0 = left, 3 = justified
  	setButtonPaddingLeft(textLayer, layers, textFrame, deltaWidth);
  }
}

function setButtonPaddingLeft(textLayer, layers, textFrame, deltaWidth) {
  // loop through the layers and resize or reposition all (except textLayer)
  for (var i = 0; i < [layers length]; i++) {
    var layer = [layers objectAtIndex:i];

    if (layer != textLayer) {
      var layerFrame = [layer frame];

      if ([layerFrame x] < [textFrame x] && [layerFrame x] + [layerFrame width] > [textFrame x]) {
        // if the layer spans the x coordinate of the text layer, assume it's a background layer
        // and resize its width accordingly
        [layerFrame addWidth: deltaWidth];
      }
      else if ([layerFrame x]  > [textFrame x]) {
        // if the layer is entirely to the right of the text layer, just reposition it
        [layerFrame addX:deltaWidth];
      }
    }
  }
}

function setButtonPaddingRight(textLayer, layers, textFrame, deltaWidth) {
  // loop through the layers and resize or reposition all (except textLayer)
  for (var i = 0; i < [layers length]; i++) {
    var layer = [layers objectAtIndex:i];
    
    if (layer != textLayer) {
      var layerFrame = [layer frame];
      var textFrameRight = [textFrame x] + [textFrame width];

      if ([layerFrame x] < textFrameRight && [layerFrame x] + [layerFrame width] > textFrameRight) {
        // if the layer spans the x coordinate of the *right edge* of the text layer, assume it's
        // a background layer and resize its width accordingly
        [layerFrame addWidth: deltaWidth];
        [layerFrame subtractX: deltaWidth];
      }
      else if ([layerFrame x] + [layerFrame width]  < textFrameRight) {
        // if the layer is entirely to the left of the text layer's right edge, just reposition it
        [layerFrame subtractX:deltaWidth];
      }
    }
  }
}

function setButtonPaddingCenter(textLayer, layers, textFrame, deltaWidth) {
  // loop through the layers and resize or reposition all (except textLayer)
  for (var i = 0; i < [layers length]; i++) {
    var layer = [layers objectAtIndex:i];
    
    if (layer != textLayer) {
      var layerFrame = [layer frame];
      var textFrameMiddle = [textFrame x] + [textFrame width] / 2;

      if ([layerFrame x] < textFrameMiddle && [layerFrame x] + [layerFrame width] > textFrameMiddle) {
        // if the layer spans the x coordinate of the *middle* of the text layer, assume it's a 
        // background layer and resize its width accordingly
        [layerFrame addWidth: deltaWidth];
        [layerFrame subtractX: deltaWidth / 2];
      }
      else if ([layerFrame x]  > textFrameMiddle) {
        // if the layer is entirely to the right of the text layer, just reposition it
        [layerFrame addX:deltaWidth / 2];
      }
      else if ([layerFrame x] + [layerFrame width]  < textFrameMiddle) {
        // if the layer is entirely to the left of the text layer's right edge, just reposition it
        [layerFrame subtractX:deltaWidth / 2];
      }
    }
  }
}

// Display an error alert and exit
function invalidSelection() {
  alert('Select the group layer of the button to modify (it must be a group containing at least one text layer and one other layer).', 'Select group');
  throw(nil); // exit the plugin
}


// Main

// Begin validation of selection
// Ensure there's only one layer selected
var selection = context.selection
if ([selection count] != 1) {
  invalidSelection();
}

var group = [selection objectAtIndex:0];
var buttonRect = [group absoluteRect];

// Ensure the selected layer is a group
if (!(group instanceof MSLayerGroup)) {
  invalidSelection();
}

var layers = [group layers];

// Ensure there are at least 2 layers in the group (text and one other layer at minimum)
if ([layers length] < 2) {
  invalidSelection();
}

// Loop through child layers to identify the text layer
var textLayer = nil;
for (var i = 0; i < [layers length]; i++) {
  var layer = [layers objectAtIndex:i];
  if (layer instanceof MSTextLayer) {
    textLayer = layer;
    break;
  }
}

// Ensure at least one text layer exists
if (!textLayer) {
  invalidSelection();
}


// Extract current padding based on buttonRect and textLayer
var buttonPadding = getButtonPadding(buttonRect, textLayer);

// Prompt user for input of new button text
var text = [doc askForUserInput:"New button text" initialValue:[textLayer stringValue]];

// Only forge on if user didn't press Cancel
if (text) {
  // If the text layer is fixed width, make it auto
  if ([textLayer textBehaviour] == 1) {
    [textLayer setTextBehaviour:0];
  }

  // Set the text layer to the new text
  [textLayer setStringValue: text];
  [textLayer adjustFrameToFit];

  // Resize the button based on the original padding
  setButtonPadding(buttonRect, textLayer, layers, buttonPadding);
  group.resizeRoot(true); // resize the group field

  // Done!  
}
